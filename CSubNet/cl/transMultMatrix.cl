/*__kernel __attribute__((vec_type_hint(float4))) void transMatrixMult(    __global const float *left, __global const float *right, __global float *target,    const int leftHeight, const int leftWidth, const int rightHeight) {   int row = get_global_id(0);  int vectorEnd = leftWidth - leftWidth % 4 - 3;
  int col;  for (col = 0; col < rightHeight; col++) {    float sum = 0;    int n;	__global const float* l = left + row * leftWidth;	__global const float* r = right + leftWidth * col;	for (n = 0; n <= vectorEnd; n += 4) {	  float4 lv = vload4(n, l);	  float4 rv = vload4(n, r);	  sum += dot(lv, rv);	}	for (n = n; n < leftWidth; n++) {	  sum += l[n] * r[n];    }    target[row * rightHeight + col] = sum;  }
}*/__kernel void transMatrixMult(    __global const float *left, __global const float *right, __global float *target,    const int leftHeight, const int leftWidth, const int rightHeight) {   int row = get_global_id(0);  int col;  for (col = 0; col < rightHeight; col++) {    float sum = 0;    int n;    for (n = 0; n < leftWidth; n++) {	  sum += left[row * leftWidth + n] * right[leftWidth * col + n];    }    target[row * rightHeight + col] = sum;  }}